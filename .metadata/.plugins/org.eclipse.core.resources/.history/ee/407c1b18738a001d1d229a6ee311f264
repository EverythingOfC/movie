package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import dto.MemberDto;
import dto.MovieDto;
import dto.PagingDto;
import util.JdbcUtil;

public class MovieDao {
	
	private static MovieDao instance = new MovieDao();
	
	private MovieDao() {
		
	}
	public static MovieDao getInstance() {
		return instance;
	}
	
	public List<MovieDto> selectAllPaging(int curr, MovieDto dto){	// 현재 페이지 수와 영화 객체를 받아옴. 
	
		PagingDto paging = new PagingDto();
		
		List<MovieDto> movieList = new ArrayList<>();
		
		int startNum = (curr - 1) * paging.getDisplayRow() + 1;	// 게시글 시작 번호
		int endNum = curr * paging.getDisplayRow();	// 게시글 끝 번호
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = JdbcUtil.getConnection();
			String url = "SELECT * from ( SELECT ROWNUM AS row_num, movie.* FROM ( SELECT * FROM movie ORDER BY seq DESC ) movie ) WHERE row_num >= ? AND row_num <= ?";
			pstmt = conn.prepareStatement(url);
			pstmt.setInt(1,startNum);
			pstmt.setInt(2, endNum);
			
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			JdbcUtil.close(conn, pstmt, rs);
		}
		return movieList;
	}
	
	
	public List<MovieDto> selectAll(){	// 전체
		
		String sql = "select * from movie order by code desc";
		List<MovieDto> mDto = new ArrayList<>();
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = JdbcUtil.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				MovieDto dto = new MovieDto();
				dto.setCode(rs.getInt("code"));
				dto.setTitle(rs.getString("title"));
				dto.setDirector(rs.getString("director"));
				dto.setActor(rs.getString("actor"));
				dto.setPrice(rs.getInt("price"));
				dto.setPoster(rs.getString("poster"));
				dto.setSynopsis(rs.getString("synopsis"));
				dto.setId(rs.getString("id"));
				mDto.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			JdbcUtil.close(conn, pstmt,rs);
		}
		return mDto;
	}
	
public MovieDto selectOne(int code){	// 상세
		
		String sql = "select * from movie where code = ? order by code desc";
		
		MovieDto dto = new MovieDto();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			conn = JdbcUtil.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,code);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				dto.setCode(rs.getInt("code"));
				dto.setTitle(rs.getString("title"));
				dto.setDirector(rs.getString("director"));
				dto.setActor(rs.getString("actor"));
				dto.setPrice(rs.getInt("price"));
				dto.setPoster(rs.getString("poster"));
				dto.setSynopsis(rs.getString("synopsis"));
				dto.setId(rs.getString("id"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			JdbcUtil.close(conn, pstmt,rs);
		}
		return dto;
	}

public void movieInsert(MovieDto dto, String id){
	
	String sql = "insert into movie values(seq_movie.nextval,?,?,?,?,?,?,?)";
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	
	try {
		conn = JdbcUtil.getConnection();
		pstmt = conn.prepareStatement(sql);
		pstmt.setString(1,dto.getTitle());
		pstmt.setInt(2, dto.getPrice());
		pstmt.setString(3,dto.getDirector());
		pstmt.setString(4, dto.getActor());
		pstmt.setString(5, dto.getPoster());
		pstmt.setString(6, dto.getSynopsis());
		pstmt.setString(7,id);
		pstmt.executeUpdate();
	} catch (Exception e) {
		e.printStackTrace();
	}finally {
		JdbcUtil.close(conn, pstmt);
	}
}


public void movieUpdate(MovieDto dto){
	
	String sql = "update movie set title=?, price = ?, director =?, actor = ?, poster=?, synopsis=? where code = ?";
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	
	try {
		conn = JdbcUtil.getConnection();
		pstmt = conn.prepareStatement(sql);
		pstmt.setString(1,dto.getTitle());
		pstmt.setInt(2, dto.getPrice());
		pstmt.setString(3,dto.getDirector());
		pstmt.setString(4, dto.getActor());
		pstmt.setString(5, dto.getPoster());
		pstmt.setString(6, dto.getSynopsis());
		pstmt.setInt(7,dto.getCode());
		pstmt.executeUpdate();
		
	} catch (Exception e) {
		e.printStackTrace();
	}finally {
		JdbcUtil.close(conn, pstmt);
	}
}

public void movieDelete(int code){
	
	String sql = "delete from movie where code = ?";
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	
	try {
		conn = JdbcUtil.getConnection();
		pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1,code);
		pstmt.executeUpdate();
		
	} catch (Exception e) {
		e.printStackTrace();
	}finally {
		JdbcUtil.close(conn, pstmt);
	}
}

public MemberDto memberLogin(String id,String pw){
	
	String sql = "select * from member where id = ? and pw = ?";
	MemberDto dto = null;
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	try {
		conn = JdbcUtil.getConnection();
		pstmt = conn.prepareStatement(sql);
		pstmt.setString(1,id);
		pstmt.setString(2,pw);
		rs = pstmt.executeQuery();
		
		while(rs.next()) {
			dto = new MemberDto();
			dto.setId(rs.getString("id"));
			dto.setPw(rs.getString("pw"));
			dto.setName(rs.getString("name"));
			dto.setAuth(rs.getString("auth"));
		}
	} catch (Exception e) {
		e.printStackTrace();
	}finally {
		JdbcUtil.close(conn, pstmt, rs);
	}
	
	return dto;
}

public void memberSign(MemberDto dto){
	
	String sql = "insert into member values(?,?,?,?)";
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	
	try {
		conn = JdbcUtil.getConnection();
		pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, dto.getId());
		pstmt.setString(2, dto.getPw());
		pstmt.setString(3, dto.getName());
		pstmt.setString(4, dto.getAuth());
		pstmt.executeUpdate();
		
	} catch (Exception e) {
		e.printStackTrace();
	}finally {
		JdbcUtil.close(conn, pstmt);
	}
	
}



}
